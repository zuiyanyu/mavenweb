1. 直接量(字面量literal)
   所有直接量(字面量)，就是程序中直接显示出来的数据值。
        100				//数字字面量
        '张三'			//字符串字面量
        false			//布尔字面量
        /js/gi			//正则表达式字面量
        null			//对象字面量
        
        {x:1, y:2}		//对象字面量表达式  ECMAScript第3版中
        ['a' ,123, 3,'abc',false ]
        或[1,2,3,4,5]  //数组字面量表达式  ECMAScript第3版中

2. ECMAScript全部关键字
   break	    else	    new     	var
   try	        catch       finally	    return
   void         for	        switch	    while
   continue	    function	this	    with
   default	    if	        throw	    do
   delete	    in	        case       instanceof
   typeof

3. ECMAScript-262第3版定义的全部保留字
   abstract	    enum	        int 	    short
   boolean  	export	        interface	static
   byte	        extends     	long	    super
   char	        final	        native	    synchronized
   class	    float	        package	    throws
   const	    goto	        private	    transient
   debugger 	implements  	protected	volatile
   double	    import	        public

4. 变量
    4.1 var定义变量：
        var  box;   alert(box);
        定义变量，如果没赋值 ，系统会赋初始值 undefined（表示未定义）。
    4.2 全局变量： 变量没有声明而直接赋值得话，默认会作为一个新的全局变量
        box= '张三';
    4.3 一条语句可定义多个变量,每个变量用逗号分隔开 (初始化或者不初始化均可)
        var box= '张三', age = 28,  height;

5. 而当你每条语句都在不同行的时候，你可以省略分号 （不建议）
    var box= '张三'
    var age= 100
===================================================
6.  JavaScript的6种数据类型
    5种简单数据类型：String、number、boolean 、null 、Undefined
    1种复杂数据类型：Object

7. typeof操作符 ： typeof操作符是用来检测变量的数据类型
    对于值或变量使用typeof操作符会返回如下字符串：
    字符串	        描述
    undefined	    未定义
    boolean     	布尔值
    string	        字符串
    number	        数值
    object	        对象 或 null

    function	    函数

实例：
    var box = '张三';
    alert(typeof  '张三');
    alert(typeof  box);
    alert(typeof(box));

typeof操作符可以操作变量，也可以操作字面量。
虽然也可以这样使用：typeof(box)，但，typeof是操作符而非内置函数。

8.字符串类型（String） :
  8.1 字符串可以由双引号(")或单引号(')表示。
  8.2 String类型包含了一些特殊的字符字面量，也叫转义序列。
        字面量	    含义
        \n	        换行
        \t	        制表
        \b	        空格
        \r	        回车
        \f	        进纸
        \\	        斜杠
        \'	        单引号
        \"	        双引号
        \xnn	    以十六进制代码nn表示的一个字符(0~F)。例：\x41
        \unnn	    以十六进制代码nnn表示的一个Unicode字符(0~F)。例：\u03a3

  8.3 字符串的一些方法
    （1）toString()方法  可以把值转换成字符串。
            var box = 11;
            box.toString()
    （2）toString()方法一般是不需要传参的，但在数值转成字符串的时候，可以传递进制参数。
            var box = 10;
            alert(box.toString());				//10，默认输出
            alert(box.toString(2));				//1010，二进制输出
            alert(box.toString(8));				//12，八进制输出
            alert(box.toString(10));				//10，十进制输出
            alert(box.toString(16));				//a，十六进制输出
    （3）String() ：
         如果在转型之前不知道变量是否是null或者undefined的情况下，我们还可以使用转型函数String()，
         这个函数能够将任何类型的值转换为字符串。
            var box = null;
            alert(String(box));
         PS：如果值有toString()方法，则调用该方法并返回相同的结果；
             如果是null或者undefined，则返回"null"或者"undeinfed"。
9.  数值类型（number）
    9.1 Number类型包含两种数值：整型、浮点型。
    9.2 最基本的数值字面量是十进制整数。
        var box = 100;			//十进制整数
        八进制数值字面量，(以8为基数)，前导必须是0，八进制序列(0~7)。
            var box = 070;			//八进制，56
            var box = 079;			//无效的八进制，自动解析为79
            var box = 08;			//无效的八进制，自动解析为8
        十六进制字面量前面两位必须是0x，后面是(0~9及A~F)。
            var box = 0xA;		//十六进制，10
            var box = 0x1f;		//十六进制，31
    9.3 浮点类型，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。
        var box = 3.8;
        var box = 0.8;
    9.4 浮点类型注意事项
       （1）内存空间：由于保存浮点数值需要的内存空间比整型数值大两倍，因此ECMAScript会自动将可以转换为整型的浮点数值转成为整型。
                var box = 8.;		//小数点后面没有值，转换为8
                var box = 12.0;		//小数点后面是0，转成为12
       （2）科学计数法
           对于那些过大或过小的数值，可以用科学技术法来表示(e表示法)。用e表示该数值的前面10的指数次幂。
               var box = 4.12e9;		//即4120000000
               var box = 0.00000000412;	//即4.12e-9
       （3）精度
           虽然浮点数值的最高精度是17位小数，但算术运算中可能会不精确。
           由于这个因素，做判断的时候一定要考虑到这个问题(比如使用整型判断)。
                alert(0.1+0.2);			//0.30000000000000004
       （4）范围
           浮点数值的范围在：Number.MIN_VALUE ~ Number.MAX_VALUE之间。
               alert(Number.MIN_VALUE);		//最小值
               alert(Number.MAX_VALUE);		//最大值
           如果超过了浮点数值范围的最大值或最小值，那么就先出现Infinity(正无穷)或者-Infinity(负无穷)。
               var box = 100e1000;				//超出范围，Infinity
               var box = -100e1000;			//超出范围，-Infinity
           也可能通过Number.POSITIVE_INFINITY和Number.NEGATIVE_INFINITY得到Infinity(正无穷)及-Infinity(负无穷)的值。
               alert(Number.POSITIVE_INFINITY);	//Infinity(正无穷)
               alert(Number.NEGATIVE_INFINITY);    //-Infinity(负无穷)
           要想确定一个数值到底是否超过了规定范围，可以使用isFinite()函数。如果没有超过，返回true，超过了返回false。
               var box = 100e1000;
               alert(isFinite(box));					//返回false或者true
    9.5 NaN
           NaN，即非数值(Not a Number)是一个特殊的值。这个数值用于表示一个本来要返回数值的操作数未返回数值的情况(这样就不会抛出错误了)。
           比如，在其他语言中，任何数值除以0都会导致错误而终止程序执行。但在ECMAScript中，会返回出特殊的值，因此不会影响程序执行。
               var box = 0 / 0;				//NaN
               var box = 12 / 0;				//Infinity
               var box = 12 / 0 * 0;			//NaN
           可以通过Number.NaN得到NaN值，任何与NaN进行运算的结果均为NaN，NaN与自身不相等(NaN不与任何值相等)。
               alert(Number.NaN);			//NaN
               alert(NaN+1);				//NaN
               alert(NaN == NaN)			//false
           isNaN()函数，用来判断这个值到底是不是NaN。
               alert(isNaN(NaN));				//true
               alert(isNaN('Lee'));			    //true，'Lee'不能转换为数值

               alert(isNaN(25));				//false，25是一个数值
               alert(isNaN('25'));				//false，'25'是一个字符串数值，可以转成数值
               alert(isNaN(true));				//false	true可以转成成1
           isNaN()函数也适用于对象。
               在调用isNaN()函数过程中，首先会调用valueOf()方法，然后确定返回值是否能够转换成数值。
               如果没有valueOf()方法，调用toString()方法，再测试返回值。
                 var box = {
                        //此方法被注释掉后 alert("isNaN:"+isNaN(box));	返回 false ;否则返回true
                        valueOf : function (){
                            return "aaa";
                        },

                        toString : function () {
                            return '123';			//可以改成return 'Lee'查看效果
                        }
                 };
                 alert("isNaN:"+isNaN(box));	 //false
    9.6 把非数值转换为数值
        有3个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()
        (1) Number()
            Number()函数是转型函数，可以用于任何数据类型，而另外两个则专门用于把字符串转成数值。
                alert(Number(true));			//1，Boolean类型的true和false分别转换成1和0
                alert(Number(25));				//25，数值型直接返回
                alert(Number(null));			//0，空对象返回0
                alert(Number(undefined));		//NaN，undefined返回NaN

            Number()操作字符串：
                只包含数值的字符串，会直接转成成十进制数值，如果包含前导0，即自动去掉。
                    alert(Number('456'));			//456
                    alert(Number('070'));			//70

                只包含浮点数值的字符串，会直接转成浮点数值，如果包含前导和后导0，即自动去掉。
                    alert(Number('08.90'));		//8.9

                如果字符串是空，那么直接转成成0。
                    alert(Number(''));				//0

                如果不是以上三种字符串类型，则返回NaN。
                    alert('Lee123');				//NaN

            Number()操作对象：
                如果是对象，首先会调用valueOf()方法，然后确定返回值是否能够转换成数值。
                如果没有valueOf()方法，调用toString()方法，再测试返回值。
                     var box = {
                        toString : function () {
                            return '123';			//可以改成return 'Lee'查看效果
                        }
                    };
                    alert(Number(box));			//123

        (2) parseInt()
            由于Number()函数在转换字符串时比较复杂且不够合理，因此在处理整数的时候更常用的是parseInt()。
                alert(parsetInt('456Lee'));		//456，会返回整数部分
                alert(parsetInt('Lee456Lee'));	//NaN，如果第一个不是数值，就返回NaN
                alert(parseInt('12Lee56Lee'));	//12，从第一数值开始取，到最后一个连续数值结束
                alert(parseInt('56.12'));		//56，小数点不是数值，会被去掉
                alert(parseInt(''));			//NaN，空返回NaN

            parseInt()除了能够识别十进制数值，也可以识别八进制和十六进制。
                alert(parseInt('0xA'));			//10，十六进制
                alert(parseInt('070'));			//56，八进制
                alert(parseInt('0xALee'));		//10，十六进制，Lee被自动过滤掉
            parseInt()提供了第二个参数，用于解决各种进制的转换。
                alert(parseInt('0xAF'));		//175，十六进制
                alert(parseInt('AF',16));		//175，第二参数指定十六进制，可以去掉0x前导
                alert(parseInt('AF'));			//NaN，理所当然
                alert(parseInt('101010101',2));	//314，二进制转换
                alert(parseInt('70',8))			//56，八进制转换
            parseFloat()是用于浮点数值转换的，和parseInt()一样，从第一位解析到非浮点数值的位置。
                alert(parseFloat('123Lee'));		//123，去掉不是别的部分
                alert(parseFloat('0xA'));			//0，不认十六进制
                alert(parseFloat('123.4.5'));		//123.4，只认一个小数点
                alert(parseFloat('0123.400'));		//123.4，去掉前后导
                alert(parseFloat('1.234e7'));		//12340000，把科学技术法转成普通数值

==============================
10.布尔类型（boolean）
    10.1 boolean类型有两个值(字面量)：true和false。
        JavaScript是区分大小写的，True和False或者其他都不是Boolean类型的值。

    10.2  其他类型转换成Boolean类型规则
    数据类型	转换为true的值	                 转换为false的值
    String	    任何非空字符串	                 空字符串
    Number	    任何非零数字值(包括无穷大)      0和NaN
    Object	    任何对象	                     null
    Undefined		                             undefined

    10.3 实例：
        显示转换：
            var hello = 'Hello World!';
            var hello2 = Boolean(hello);
            alert(typeof hello);
        隐士转换： if条件语句里面的条件判断，就存在隐式转换
            var hello = 'Hello World!';
            if (hello) {
                alert('如果条件为true，就执行我这条！');
            } else {
                alert('如果条件为false，就执行我这条！');

11. Undefined
   11.1 Undefined类型只有一个值，即特殊的undefined。在使用var声明变量，但没有对其初始化时，这个变量的值就是undefined。

   11.2 Undefined的引入，正式区分空对象与未经初始化的变量:
        var box ;        //未初始化的变量
        var box = null;  //空对象

   11.3 未初始化的变量与根本不存在的变量(未声明的变量)也是不一样的:
        var box;      //未初始化的变量
        alert(age);   //undefined
        alert(age);   //根本不存在的变量(未声明的变量)  报异常： Uncaught ReferenceError: age is not defined

        typeof  box，typeof age  //都返回的undefined

        他们的类型，却都是undefined,但是使用的时候，不存在的变量会报异常，
        所以，我们在定义变量的时候，尽可能的不要只声明，不赋值。

12. NULL
    12.1 Null类型是一个只有一个值的数据类型，即特殊的值null。
         它表示一个空对象引用，而typeof操作符检测null会返回object。

    12.2 如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null。这样，当检查null值就知道变量是否已经分配了对象引用了。
        var box = null;
        if (box != null) {
            alert('box对象已存在！');
        }
13. undefined是派生自null的
    13.1 alert(undefined == null);  返回true。
    13.2 由于undefined和null两个值的比较是相等的，所以，未初始化的变量和赋值为null的变量会相等。
         这时，可以采用typeof变量的类型进行比较。
         typeof  undefined  ; // 返回 undefined
         typeof  null  ;      // 返回 object

         var box;
         var car = null;
         alert(typeof box == typeof car)

14、对象类型
    14.1 ECMAScript中的对象其实就是一组数据和功能（函数）的集合.
    14.2 对象可以通过执行new操作符后跟要创建的对象类型的名称来创建。
         var box = new Object();
    14.3 Object()里可以任意传参，可以传数值、字符串、布尔值等。而且，还可以进行相应的计算。
         var box = new Object(2);			//Object类型，值是2
         var age = box + 2;					//可以和普通变量运算
         alert(age);						//输出结果，转型成Number类型了

    14.4 由于在实际使用中对string,number,boolean的操作比较多，JavaScript进行了进一步的封装，
         提供了内置的String(),Number(),Boolean()对象，可以使用new操作符来创建相应类型的对象。
         var box = new Number(5);			//new String('Lee')、new Boolean(true)
         alert(typeof box);					//Object类型

========================================
15.  运算符
15.1 算术运算符
     ECMAScript定义了5个算术运算符，加减乘除求模(取余)。
     如果在算术运算的值不是数值，那么后台会先使用Number()转型函数将其转换为数值(隐式转换)。

     （1）加法
         var box = 1 + 2;					//等于3
         var box = 1 + NaN;					//NaN，只要有一个NaN就为NaN
         var box = Infinity + Infinity;			//Infinity
         var box = -Infinity + -Infinity;		//-Infinity
         var box = Infinity + -Infinity;			//NaN，正无穷和负无穷相加等NaN
         var box = 100 + '100';			//100100，字符串连接符，有字符串就不是加法
         var box = '您的年龄是：' + 10 + 20;	//您的年龄是：1020，被转换成字符串
         var box = 10 + 20 + '是您的年龄';		//30是您的年龄，没有被转成字符串
         var box = '您的年龄是：' + (10 + 20);	//您的年龄是：30，没有被转成字符串
     （2）减法
          var box = 100 - 70;					//等于30
          var box = -100 - 70					//等于-170
          var box = -100 - -70				//-30，一般写成-100 - (-70)比较清晰
          var box = 1 - NaN;					//NaN，只要有一个NaN就为NaN
          var box = Infinity - Infinity;			//NaN
          var box = -Infinity - -Infinity;			//NaN
          var box = Infinity - -Infinity;			//Infinity
          var box = -Infinity - Infinity;			//-Infinity
          var box = 100 - true;				//99，true转成数值为1
          var box = 100 - '';					//100，''转成了0
          var box = 100 - '70';				//30，'70'转成了数值70
          var box = 100 - null;				//100，null转成了0
          var box = 100 - 'Lee';				//NaN，Lee转成了NaN

     （3）乘法
         var box = 100 * 70;					//7000
         var box = 100 * NaN;				//NaN，只要有一个NaN即为NaN
         var box = Infinity * Infinity;			//Infinity
         var box = -Infinity * Infinity ;			//-Infinity
         var box = -Infinity * -Infinity ;		//Infinity
         var box = 100 * true;				//100，true转成数值为1
         var box = 100 * '';					//0，''转成了0
         var box = 100 * null;				//0，null转成了0
         var box = 100 * 'Lee';				//NaN，Lee转成了NaN
     （4）除法
         var box = 100 / 70;					//1.42....
         var box = 100 / NaN;				//NaN
         var box = Infinity / Infinity;		//NaN
         var box = -Infinity / Infinity ;	//NaN
         var box = -Infinity / -Infinity; 	//NaN
         var box = 100 / true;				//100，true转成1
         var box = 100 / '';					//Infinity，
         var box = 100 / null;				//Infinity，
         var box = 100 / 'Lee';				//NaN
     （5）求模
         var box = 10 % 3;					//1，余数为1
         var box = 100 % NaN;				//NaN
         var box = Infinity % Infinity;			//NaN
         var box = -Infinity %  Infinity ;		//NaN
         var box = -Infinity %  -Infinity; 		//NaN
         var box = 100 %  true;				//0
         var box = 100 %  '';				//NaN
         var box = 100 %  null;				//NaN
         var box = 100 %  'Lee';				//NaN

16. 一元运算符
    只能操作一个值的运算符叫做一元运算符。
   （1）递增++和递减--
       var box = 100;
       ++box;							//把box累加一个1，相当于box = box+1
       --box;							//把box累减一个1，相当于box = box-1
       box++;							//同上
       box--;							//同上
   (2)其他类型应用一元运算符的规则
      var box = '89';	box++;				//90，数值字符串自动转换成数值
      var box = 'ab';	box++;				//NaN，字符串包含非数值转成NaN
      var box = false; box++;				//1，false转成数值是0，累加就是1
      var box = 2.3; box++;				//3.3，直接加1
      var box = {						//1，不设置toString或valueOf即为NaN
      	toString : function() {
      		return 1;
      	}
      };	 box++;
   (3) 加运算
       var box = 100;  +box;			//100，对于数值，不会产生任何影响
       var box = '89'; +box;			//89，数值字符串转换成数值
       var box = 'ab'; +box;			//NaN，字符串包含非数值转成NaN
       var box = false; +box;			//0，布尔值转换成相应数值
       var box = 2.3;  +box;			//2.3，没有变化

   (4) 减运算
       var box = 100;  -box;				//-100，对于数值，直接变负
       var box = '89'; -box;				//-89，数值字符串转换成数值
       var box = 'ab'; -box;				//NaN，字符串包含非数值转成NaN
       var box = false; -box;				//0，布尔值转换成相应数值
       var box = 2.3;  -box;			    //-2.3，没有变化
       var box = {						    //-1，不设置toString或valueOf即为NaN
            toString : function() {
                return 1;
            }
       };	 -box;

17. 关系运算符
    17.1 用于进行比较的运算符称作为关系运算符：小于(<)、大于(>)、小于等于(<=)、大于等于(>=)、相等(==)、不等(!=)、
                                          全等(恒等)(===)、不全等(不恒等)(!==)
        在全等和全不等的判断上，值和类型都相等，才返回true，否则返回false
        其他的比较，只比较值，不比较类型。

    17.2 和其他运算符一样，当关系运算符操作非数值时要遵循一下规则：
        （1）两个操作数都是数值，则数值比较；
        （2）两个操作数都是字符串，则比较两个字符串对应的字符编码值；
        （3）两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较；
        （4）两个操作数有一个是对象，则先调用valueOf()方法或toString()方法，再用结果比较；
            var box = 3 > 2;					//true
            var box = 3 > 22;					//false
            var box = '3' > 22;					//false
            var box = '3' > '22';				//true
            var box = 'a' > 'b';				//false  a=97,b=98
            var box = 'a' > 'B';				//true	B=66
            var box = 1 > 对象;               	//false，如果有toString()或valueOf()则返回1>返回数的值
    17.3 在相等和不等的比较上，如果操作数是非数值，则遵循一下规则：
        (1)一个操作数是布尔值，则比较之前将其转换为数值，false转成0，true转成1；
        (2)一个操作数是字符串，则比较之前将其转成为数值再比较；
        (3)一个操作数是对象，则先调用valueOf()或toString()方法后再和返回值比较；
        (4)不需要任何转换的情况下，null和undefined是相等的；
        (5)一个操作数是NaN，则==返回false，!=返回true；并且NaN和自身不等；
        (6)两个操作数都是对象，则比较他们是否是同一个对象，如果都指向同一个对象，则返回true，否则返回false。
        (7)在全等和全不等的判断上，比如值和类型都相等，才返回true，否则返回false。
            var box = 2 == 2;					//true
            var box = '2' == 2;					//true，'2'会转成成数值2
            var box = false == 0;				//true，false转成数值就是0
            var box = 'a' == 'A';				//false，转换后的编码不一样
            var box = 2 == {};				    //false，执行toString()或valueOf()会改变
            var box = 2 == NaN;				    //false，只要有NaN，都是false
            var box = {} == {};             	//false，比较的是地址，每个新创建对象的引用地址都不同

            var age = {};
            var height = age;
            var box = age == height;			//true，引用地址一样，所以相等

            var box = '2' === 2					//false，值和类型都必须相等
            var box = 2 !== 2					//false，值和类型都相等了
    17.4 特殊值对比表
            表 达 式	                值
            null == undefined	        true
            'NaN' == NaN	            false
            5 == NaN	                false
            NaN == NaN	                false
            false == 0              	true
            true == 1	                true
            true == 2	                false
            undefined == 0	            false
            null == 0               	false
            '100' == 100	            true
            '100' === 100           	false

18. 逻辑运算符
     18.1 用于布尔值的操作：逻辑与(AND)、逻辑或(OR)、逻辑非(NOT)

     18.2 如果两边的操作数有一个操作数不是布尔值的情况下，与运算就不一定返回布尔值，此时，遵循已下规则：
        (1)第一个操作数是对象，则返回第二个操作数；
        (2)第二个操作数是对象，则第一个操作数返回true，才返回第二个操作数，否则返回false;
        (3)有一个操作数是null，则返回null；
        (4)有一个操作数是undefined，则返回undefined。
            var box = 对象 && (5 > 4);			//true，返回第二个操作数
            var box = (5 > 4) && 对象;			//[object Object]
            var box = (3 > 4) && 对象;			//false
            var box = (5 > 4) && null;			//null

     。。。

19.其他运算符
（6）in运算符：测试一个对象是否存在一种属性
（7）instanceof运算符：返回一个布尔值，该值指示一个对象是否为特定类型的一个实例。


20. 语句的种类
    类型	        子类型	语法
    声明语句	    变量声明语句	        var box = 100;
                    标签声明语句	        label : box;

    表达式语句	    变量赋值语句	        box = 100;
                    函数调用语句	        box();
                    属性赋值语句	        box.property = 100;
                    方法调用语句	        box.method();

    分支语句	    条件分支语句	        if () {} else {}
                   多重分支语句	switch ()   { case n : ...};

    循环语句    	 for                 	 for (;;;) {}
                    for ... in	            for ( x in x) {}
                    while	                while () {};
                    do ... while	        do {} while ();

    控制结构	    继续执行子句	        continue ;
                    终端执行子句	        break ;
                    函数返回子句	        return ;
                    异常触发子句	        throw ;
                    异常捕获与处理	        try {} catch () {} finally {}

    其他	        空语句                	;
                    with语句	            with () {}

21. for…in语句
    for...in语句是一种精准的迭代语句，可以用来枚举对象的属性。
        var box = {							//创建一个对象
            'name' : '张三',				//键值对，左边是属性名，右边是值
            'age' : 28,
            'height' : 178
        };
        var box=new Array（）;或 var box=[10,2,a,bb,aa,false,true]
        box=[10,2,a,bb,aa,false,true]

        for (var p in box) {			//列举出对象的所有属性
            alert(p);
        }

22. with语句
    with语句的作用是将代码的作用域设置到一个特定的对象中。
        var box = {								//创建一个对象
            'name' : '张三',					//键值对
            'age' : 28,
            'height' : 178
        };

        var n = box.name;							//从对象里取值赋给变量
        var a = box.age;
        var h = box.height;

        可以将上面的三段赋值操作改写成：
        with (box) {								//省略了box对象名
        	var n = name;
        	var a = age;
        	var h = height;
        }

        或者打印多条信息：
        with( document){
        	write( “Java”);
        	write(‘Script’);
        	write(“的世界！”);
        }
23. try…catch语句
    捕获异常。
    try 
    {
    	    //代码块
    }
    catch (exception){  //没有类型
    	    //处理错误
    }
    finally{
    	    //代码块
    }

24. 函数
         //定义一个函数
        function doSth() {
            a = "AAA";
        }
        //定义一个匿名函数，并将函数句柄赋值给tmp变量  tmp的类型是funcation
       var tmp = function() {
            a = "AAA";
        }

        var box = {
             age : 3 ,
            //此方法被注释掉后 alert("isNaN:"+isNaN(box));	返回 ture
            //定义一个方法 。 定义一个对象的属性变量，属性值为一个函数
            valueOf: function (){
                return "1";
            },

            toString : function () {
                return '123';			//可以改成return 'Lee'查看效果
            }
        };