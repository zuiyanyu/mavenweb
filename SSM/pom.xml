<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>mavenweb</artifactId>
        <groupId>com.maven.mavenweb</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>SSM</artifactId>
    <packaging>war</packaging>
    <name>mavenweb-SSM</name>
    <url>http://mtf</url>
    <properties>
        <tar.final.name>${project.artifactId}.${project.packaging}</tar.final.name>
        <spring-boot.version>2.2.2.RELEASE</spring-boot.version>
        <!--<org.springframework.version>4.3.19.RELEASE</org.springframework.version>-->
        <junit.version>4.12</junit.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
        </dependency>
        <!-- =================spring 框架 ===================== -->

        <!-- Spring 四个核心 + 1个依赖  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>
        <!-- Spring beans包-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>
        <!-- Spring 容器包 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>
        <!-- spring 的表达式-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <!-- 一个spring的日志包依赖-->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>

         <!--AOP ：切面编程-->
         <!--Spring aop依赖-->
       <!-- aop联盟规范：  定义通知类型，具有特性接口，必须实现，从而确定方法名-->
        <dependency>
            <groupId>org.aopalliance</groupId>
            <artifactId>com.springsource.org.aopalliance</artifactId>
        </dependency>
        <!--aop联盟规范的实现-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>

        <!-- Spring aspects依赖 -->
        <!--aspectj 提供切入点表达式功能  确定aop切面编程的切入点-->
        <!--expression="execution(* com.spring_stu.service.serviceImpl.UserServiceImpl.*(..))"-->
        <!--aspectj规范：定义通知类型，只定义类型名称，以及方法格式 ; 也是aop框架-->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>com.springsource.org.aspectj.weaver</artifactId>
        </dependency>
        <!--aspectj规范实现-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>

        <!--=========================================================================-->
        <!--解析yaml文件-->
        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
            <version>1.17</version>
        </dependency>

        <!-- =========log日志打印包 ========= -->
        <!--slf4j打印日志 (推荐使用) slf4j-api提供接口，slf4j-log4j提供具体的实现。-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <!--===========配置jason操作  ========== -->
        <!--配置Jackson start （推荐使用） -->
        <!-- 配置fastjson start（推荐使用） 。解析与生成json使用的jar包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
         </dependency>
        <!-- 配置fastjson end -->
        <!--jackson springWeb 的 @ResponseBody 和 @RequestBody 两个注解-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <!--===================================================================-->

        <!-- ==========mybatis框架==========-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
        </dependency>
        <!--mybatis 逆向工程的实现-->
        <!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.7</version>
        </dependency>

        <!--========springWeb框架==============-->
        <!-- Spring web依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--Spring webmvc依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <!--============== spring与 junit，mybatis，springWeb进行整合 =========-->
        <!--spring 与 Junit的整合-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>
        <!-- junit 单元测试依耐 -->
        <!--<dependency>-->
            <!--<groupId>junit</groupId>-->
            <!--<artifactId>junit</artifactId>-->
            <!--<version>${junit.version}</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <!-- spring 与mybatis的整合-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
        </dependency>
        <!-- end-->


        <!-- Spring容器依赖包,将第三方库整合进Spring应用上下文,提供支持 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>



        <!-- Spring JDBC包和tx事务包：start -->
        <!-- Spring jdbc依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>
        <!--Spring事物依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <!--<version>${org.springframework.version}</version>-->
        </dependency>

        <!-- 基于class类进行的动态代理  spring的aop要使用-->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
        </dependency>
        <!-- end-->
        <!-- ===================== SSM连接数据库  ================= -->
        <!-- JDBC整合配置c3p0连接池-->
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
        </dependency>
        <!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 -->
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
        </dependency>
        <!--mysql数据库连接驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
        </dependency>

        <!--=====================其他功能 jar包==============================-->
        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
        <!--<dependency>-->
            <!--<groupId>org.apache.poi</groupId>-->
            <!--<artifactId>poi</artifactId>-->
            <!--<version>3.17</version>-->
        <!--</dependency>-->


        <!--httpServlet 协议的依赖包-->
        <!--<dependency>-->
        <!--<groupId>javax.servlet</groupId>-->
        <!--<artifactId>servlet-api</artifactId>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>javax.servlet.jsp</groupId>-->
        <!--<artifactId>jsp-api</artifactId>-->
        <!--<version>2.0</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <!--====================================================================-->
        <!-- springMVC的 MultipartFile进行文件上传依赖的两个jar包-->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
         </dependency>

        <!-- 操作Excel文件 的依赖包-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <!--<dependency>-->
        <!--<groupId>javax</groupId>-->
        <!--<artifactId>javaee-api</artifactId>-->
        <!--<version>6.0</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <!--<dependency>-->
        <!--<groupId>com.sun.faces</groupId>-->
        <!--<artifactId>jsf-impl</artifactId>-->
        <!--<version>2.1.13</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <!--<dependency>-->
        <!--<groupId>javax.servlet</groupId>-->
        <!--<artifactId>jstl</artifactId>-->
        <!--<version>1.2</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->





    </dependencies>

    <build>
        <finalName>${project.name}-${project.version}</finalName>
        <!--配置打包静态资源：maven打包的时候将静态资源也进行打包-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/**</include>
                    <!--<include>**/*.xml</include>-->
                    <!--<include>**/*.properties</include>-->
                </includes>
            </resource>
            <resource>
                <directory>src/main/java/</directory>
                <includes>
                    <include>com/mavenweb/Funcations/**/**</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <!--内置tomcat启动web项目-->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <configuration>
                    <port>${app.client.run.port}</port>
                    <path>${app.run.path}</path>
                </configuration>
            </plugin>


            <!--mybatis进行逆向工程 生成 xml,pojo,mapper文件-->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.7</version>
                <configuration>
                    <verbose>true</verbose>
                    <!-- 已经存在的文件不进行重新生成 -->
                    <!--<overwrite>false</overwrite>-->
                    <overwrite>false</overwrite>
                    <configurationFile>src/main/resources/mybatis-generatorConfig.xml</configurationFile>

                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.47</version>
                    </dependency>
                    <dependency>
                        <groupId>com.maven.mavenweb</groupId>
                        <artifactId>mybatis-generator-maven-plugin-extend</artifactId>
                        <version>1.0-SNAPSHOT</version>
                        </dependency>
                </dependencies>
            </plugin>

        </plugins>
    </build>
</project>