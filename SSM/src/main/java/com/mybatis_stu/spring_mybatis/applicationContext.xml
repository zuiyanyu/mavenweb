<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context= "http://www.springframework.org/schema/context"
       xmlns:mvc= "http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- 加载db.properties 文件-->
    <bean id="config" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations" value="classpath:datasource.properties"/>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${mysql.url}"/>
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
    </bean>

    <!-- 配置mybatis的需要的核心类 ：SqlSessionFactory
         在SpringIOC容器中，创建MyBatis的核心类SqlSessionFactory
     -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--    mybatis配置自动识别驼峰-->
        <property name="configLocation" value="classpath:mybatis-configuration.xml"/>

        <!-- 配置SQL映射文件信息 -->
        <!--加载mapper.xml的路径 mapping路径下的xml ,比如: UserMapper.xml-->
        <property name="mapperLocations" value="classpath:com/mavenweb/mapper/*Mapper.xml"/>
    </bean>

    <!--将mybatis的SqlSessionFactory交给Spring  ssm整合
     basePackage所在的property的作用：
     将com.webapp.dao.mapping包中，所有的接口产生与之对应的动态代理对象
     (对象名 就是首字母小写的接口名)：userMapper.addUser()
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage属性指定了扫描的基准包，MapperScannerConfigurer将递归扫描基准包（包括下面的子包）下所有接口
            如果他们在sql映射文件中定义过，则将他们动态注册为mapperFactoryBean，这样既可批量产生映射器实现类
            basePackage属性中可以包含多个包名，多个包名直接使用逗号或分号隔开
        -->
        <property name="basePackage" value="com.mavenweb.mapper"/>
        <!-- 注意如果sqlSessionFactory配置了多个那么自动装配则无法进行，需要指定 sqlSessionFactory如下
        注意此属性是name，而不是sqlSessionFactory，为其赋值使用的是 value -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--启动此applicationContext.xml的时候，顺带着启动dao层的配置文件-->
    <!--<import resource="classpath:"/>-->
    <!--<settings>-->
        <!--<setting name="mapUnderscoreToCamelCase" value="true"/>-->
    <!--</settings>-->

    <!--spring扫描注解：将控制器所在包 加入IOC容器-->
    <context:component-scan base-package="com.mavenweb">
        <!--SpringMVC和Spring配置文件，如果都配置包的扫描，可能会导致有的bean被创建2次。
        解决办法，在Spring配置文件扫描中去除控制层的扫描：-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller "/>
    </context:component-scan>


    <bean id="tasks" class="com.spring_stu.spring_scheduled.b_annotation.ScheduledTasks"/>

    <!--<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">-->
        <!--<property name="corePoolSize" value="5"/>-->
        <!--<property name="maxPoolSize" value="10"/>-->
        <!--<property name="queueCapacity" value="20"/>-->
    <!--</bean>-->

    <!--<bean id="scheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">-->
        <!--<property name="poolSize" value="10"/>-->
    <!--</bean>-->

    <!--<task:annotation-driven executor="executor" scheduler="scheduler" />-->
</beans>