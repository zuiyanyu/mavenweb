<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
       					   http://www.springframework.org/schema/aop 
       					   http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 1 创建目标类 -->
	<bean id="userServiceId" class="com.spring_stu.service.serviceImpl.UserServiceImpl"></bean>
	<!-- 2 创建切面类（通知） -->
	<bean id="myAspectId" class="com.spring_stu.spring_aop.c_spring_aop.MyAspect"></bean>
	<!--  方式3： 全自动   使用spring AOP的切面编程功能实现  通过接口来确定通知类型
		  但是只能声明一种类型的通知类型。 另一种方式(aspectj)可以声明多个切入点，且可使用注解实现aop功能

	     从Spring容器中获取目标类，如果配置aop，spring将自动生成代理。
	    3 aop编程
		3.1 导入命名空间
		3.2 使用 <aop:config>进行配置
				proxy-target-class="true" 声明时使用cglib代理
			<aop:pointcut> 切入点 ，从目标对象获得具体方法
			<aop:advisor> 特殊的切面，只有一个通知 和 一个切入点
				advice-ref 通知引用
				pointcut-ref 切入点引用
		3.3 切入点表达式  aspectj切入点表达式来确定目标类和切入点
			execution(* com.itheima.c_spring_aop.*.*(..))
			选择方法         返回值任意   包                                             类名任意   方法名任意   参数任意
		
	-->
	<aop:config proxy-target-class="false">
		<aop:pointcut expression="execution(* com.spring_stu.service.serviceImpl.UserServiceImpl.*(..))" id="myPointCut"/>
		<!--将 advice-ref这一个通知，应用到 指定的一个或者多个切入点中，从而形成一个切面 advisor-->
		<aop:advisor advice-ref="myAspectId" pointcut-ref="myPointCut"/>
	</aop:config>
</beans>