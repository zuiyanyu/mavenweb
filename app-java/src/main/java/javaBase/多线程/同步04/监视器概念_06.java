package javaBase.多线程.同步04;

/**
 * TODO 1. 监视器的意义：
 * 锁和条件是线程同步的强大工具，但是，严格地讲，它们不是面向对象的。
 * 多年来，研究人员努力寻找一种方法，可以在不需要程序员考虑如何加锁的情况下，就可以保证多线程的安全性。
 * 最成功的解决方案之一是监视器（monitor)
 *
 * TODO 2. 监视器的特性：
 *      2.1 监视器是只包含私有域的类。
 *      2.2 每个监视器类的对象有一个相关的锁。
 *      2.3 使用该锁对所有的方法进行加锁。
 *          换句话说，如果客户端调用 obj.method(), 那么obj对象的锁是在方法调用开始时自动获得， 并且当方法返回时自动释放该锁。
 *          因为所有的域是私有的，这样的安排可以确保一个线程在对对象操作时， 没有其他线程能访问该域。
 *      2.4 该锁可以有任意多个相关条件.
 *      监视器的早期版本只有单一的条件， 使用一种很优雅的句法。可以简单地调用 await accounts[from] >= balance 而不使用任何显式的条件变量。
 *      然而，研究表明盲目地重新测试条件是低效的。显式的条件变量解决了这一问题。 每一个条件变量管理一个独立的线程集。
 *
 *TODO 3. Java 设计者以不是很精确的方式采用了监视器概念， Java 中的每一个对象有一个内部的锁和内部的条件。
 *      如果一个方法用 synchronized 关键字声明，那么，它表现的就像是一个监视器方法。通过调用 wait/notifyll/notify 来访问条件变量。
 *
 *TODO 4. 普通java对象 和 监视器 的区别
 * 在下述的 3 个方面 Java 对象不同于监视器， 从而使得线程的安全性下降：
 * •域不要求必须是 private。
 * •方法不要求必须是 synchronized。
 * •内部锁对客户是可用的。
 *
 */
public class 监视器概念_06 {
}
