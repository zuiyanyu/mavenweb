package javaBase.多线程.执行器_07;

/**
 * TODO 1. 有些应用使用了大量线程， 但其中大多数都是空闲的。
 *   举例来说:
 *  1.1 一个 Web 服务器可能会为每个连接分别使用一个线程。
 *  1.2 另外一些应用可能对每个处理器内核分别使用一个线程，来完成计算密集型任务， 如图像或视频处理。
 *     (Java SE 7 中新引入了 fork-join 框架，专门用来支持后一类应用。)
 *
 *TODO 2. 假设有一个处理任务， 它可以很自然地分解为子任务， 如下所示：
 *      if (problemSize < threshold){
 *          solve problem directly  （直接进行问题的解决）
 *      else{
 *          1. break problem into subproblems     (先将大问题拆分为小问题)
 *          2. recursively solve each subproblem  (递归地解决每一个小问题)
 *          3. combine the results               （合并每一个小问题的处理结果）
 *      }
 *     图像处理就是这样一个例子。要增强一个图像， 可以变换上半部分和下部部分。如果有足够多空闲的处理器，这些操作可以并行运行。
 *     （除了分解为两部分外，还需要做一些额外的工作， 不过这属于技术细节）
 *
 *TODO 3. 我们将讨论一个更简单的例子
 * 假设想统计一个数组中有多少个元素满足某个特定的属性。可以将这个数组一分为二，分别对这两部分进行统计， 再将结果相加。
 *
 *略。。。
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
public class Fork_Join框架_05 {
}
