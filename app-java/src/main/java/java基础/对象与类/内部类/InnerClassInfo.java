package java基础.对象与类.内部类;

/**
 * 内部类（inner class) 机制
 * TODO 1. 内部类定义在一个类中的类， 其中的方法可以访问包含它们的外部类的域
 * TODO 2. 内部类技术主要用于设计具有相互协作关系的类集合。
 *
 *TODO 3. 为什么需要使用内部类呢？ 其主要原因有以下三点：
 *      •内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。
 *      •内部类可以对同一个包中的其他类隐藏起来。
 *      •当想要定义一个回调函数且不想编写大量代码时，使用匿名 （anonymous) 内部类比较便捷。
 *
 * TODO 4. 内部类的对象有一个隐式引用， 它引用了实例化该内部对象的外围类对象。通过这个指针， 可以访问外围类对象的全部状态。
 * TODO    static 内部类没有这种附加指针
 *
 * 我们将这个比较复杂的内容分几部分介绍。
 * •在 6.4.1 节中， 给出一个简单的内部类， 它将访问外围类的实例域。
 * •在 6.4.2 节中，给出内部类的特殊语法规则。
 * •在 6.4.3 节中，领略一下内部类的内部， 探讨一下如何将其转换成常规类。
 * •在 6.4.4 节中，讨论局部内部类，它可以访问外围作用域中的局部变量。
 * •在 6.4.5 节中，介绍匿名内部类， 说明在 Java 有 lambda 表达式之前用于实现回调的基本方法。
 * •最后在 6.4.6 节中，介绍如何将静态内部类嵌套在辅助类中。
 *
 * TODO 内部类是一种编译器现象， 与虚拟机无关。编译器将会把内部类翻译成用 $ (美元符号）分隔外部类名与内部类名的常规类文件， 而虚拟机则对此一无所知。
 */
public class InnerClassInfo {
}
